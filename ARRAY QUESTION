1.FIND THE MINIMUM AND MAXIMUM IN ARRAY

#include<iostream>
using namespace std;
int Min(int arr[], int n){
    int mini = INT_MAX;
    for(int i=0; i<n; i++){
        mini = min(mini,arr[i]);
        // if(mini>arr[i]) mini = arr[i];
    }
    return mini;
}

int Max(int arr[], int n){
    int maxi = INT_MIN;
    for(int i=0; i<n; i++){
        maxi = max(maxi,arr[i]);
        // if(maxi<arr[i]) maxi = arr[i];
    }
    return maxi;
}

void input(int arr[],int n){
    for(int i = 0; i<n; i++){
        cout<<"Enter "<<i+1<<" element : ";
        cin>>arr[i];
    }
    return;
}	

2 LINEAR SEARCH IN ARRAY 

#include<iostream>
using namespace std;

void Take_input(int arr[],int n){
    for(int i = 0; i<n; i++){
        cout<<"Enter "<<i+1<<" element : ";
        cin>>arr[i];
    }
    return;
}

void Print_arr(int arr[], int n){
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return;
}

// Linear Search
bool ispresent(int arr[], int n, int key){
    for(int i=0; i<n; i++){
        if(arr[i] == key){
            return 1;
            break;
        }
    }
    return 0;
}
int main(){
    int n;
    cout<<"Enter the size : ";
    cin>>n;


    int arr[n]; // Not a good practice

    Takeinput(arr,n);

    int key;
    cout<<"Enter the element you want to search : ";
    cin>>key;

    if(is_present(arr,n,key)) cout<<"Found"<<endl;
    else cout<<"Not Found"<<endl;

    return 0;
}

3. ARRAY ELEMENTS PAIR SUM

#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> pairSum(vector<int> &arr, int sum) {
    int n = arr.size();
    vector<vector<int>> ans;

    // Iterate over the array and find pairs that sum up to the given value
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == sum) {
                vector<int> temp;
                temp.push_back(min(arr[i], arr[j]));
                temp.push_back(max(arr[i], arr[j]));
                ans.push_back(temp);
            }
        }
    }

    // Sort the answer 
    sort(ans.begin(), ans.end());
    return ans;
}

int main() {
    vector<int> arr = {1, 2, 3, -3, -2, -1}; 
    int sum = 0;

    vector<vector<int>> ans = pairSum(arr, sum);

    for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j < ans[i].size(); j++) {
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

3 REVERSE OF ARRAY

#include<iostream>
using namespace std;

void Take_input(int arr[],int n){
    for(int i = 0; i<n; i++){
        cout<<"Enter "<<i+1<<" element : ";
        cin>>arr[i];
    }
    return;
}

// Program to print the array
void Print_arr(int arr[], int n){
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return;
}

// Program to Swap :
void swap(int arr[],int n){
    int i = 0;
    int j = n-1;
    while(i<j){
        swap(arr[i],arr[j]);
        i++;
        j--;
    }
    return;
}

int main(){
    int n;
    cout<<"Enter the size : ";
    cin>>n;


    int arr[n]; // Not a good practice

    Take_input(arr,n);
    cout<<"Elements of the array : ";
    Print_arr(arr,n);

    swap(arr,n);

    cout<<endl<<"Elements of the array : ";
    Print_arr(arr,n);

    return 0;
}

4 SORT OF ARRAY

#include <iostream>
#include <vector>
using namespace std;

void print_arr(vector<int> &arr){
    int n = arr.size();
    for(int i = 0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return;
}

// ( Brute_Force
// void sort(vector<int> &arr){

//     int n = arr.size(); // stroing the size of array

//     // Storing the counts of 0's and 1's
//     int count0 = 0;
//     int count1 = 0;
//     for(int i = 0; i<n; i++){
//         if(arr[i] == 0) count0++;
//         else if(arr[i] == 1) count1++;
//     }

//     // re-initializing the array 
//     int i = 0;
//     for( ; i<count0; i++ ) arr[i] = 0;
//     for( ; i<count0+count1; i++) arr[i] = 1;

//     return;
// ) }

// (Two Pointer approach) :

void sort(vector<int> &arr){
    int i = 0;
    int j = arr.size() - 1;
    while(i < j){
        while(arr[i] == 0 && i<j) i++;
        while(arr[j] == 1 && i<j) j--;
        if(i<j){
            swap(arr[i],arr[j]);
            i++;
            j--;
        }
    }
    return;
}


int main() {

    vector<int> arr = { 1, 0, 1, 1, 0, 0, 1, 1};

    cout<<"Printing array before sorting : ";
    print_arr(arr);

    sort01(arr);

    cout<<endl<<"Printing array after sorting : ";
    print_arr(arr);

    return 0;
}

5 ARRAY SHORT 

#include <iostream>
#include <vector>
using namespace std;

void print_arr(vector<int> &arr){
    int n = arr.size();
    for(int i = 0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return;
}

//( Brute_Force medhod 
// void sort(vector<int> &arr){

//     int n = arr.size(); // stroing the size of array

//     // Storing the counts of 0's, 1's and 2's
//     int count0 = 0;
//     int count1 = 0;
//     int count2 = 0;

//     for(int i = 0; i<n; i++){
//         if(arr[i] == 0) count0++;
//         else if(arr[i] == 1) count1++;
//         else count2++;
//     }

//     // re-initializing the array 
//     int i = 0;
//     for( ; i<count0; i++ ) arr[i] = 0;
//     for( ; i<count0+count1; i++) arr[i] = 1;
//     for( ; i<count0+count1+count2; i++) arr[i] = 2;

//     return;
)// }

// Dutch National Flag Algorithm :
void sort(vector<int> &arr){
    int low = 0;
    int mid = 0;
    int high = arr.size() - 1;
    while(mid<=high){
        if(arr[mid] == 0) swap(arr[mid++],arr[low++]);
        else if(arr[mid] == 1) mid++;
        else swap(arr[mid],arr[high--]);
    }
    return;
}

int main() {

    vector<int> arr = { 1, 0, 2, 1, 2, 1, 0, 2, 0, 1, 1};

    cout<<"Printing array before sorting : ";
    print_arr(arr);

    sort012(arr);

    cout<<endl<<"Printing array after sorting : ";
    print_arr(arr);

    return 0;
}

6 insertion and deletion in array

#include<iostream>
using namespace std;

void input(int arr[],int n){
    for(int i = 0; i<n; i++){
        cout<<"Enter "<<i+1<<" element : ";
        cin>>arr[i];
    }
    return;
}

//print the array
void get_arr(int arr[], int n){
    for(int i=0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    return;
}
int main(){
    int n;
    cout<<"Enter the size : ";
    cin>>n;

    int arr[n];

    //Program to print the size of any array 
    cout<<"Size of array : "<<sizeof(arr)/sizeof(int)<<endl;
    input(arr,n);

    get_arr(arr,n);

    return 0;
}

7 array sum

#include <iostream>
using namespace std;

void Input(int arr[], int n){
    cout<<endl<<"Enter the elments of the array : "<<endl;
    for(int i = 0; i<n; i++){
        cout<<"arr["<<i<<"] : ";
        cin>>arr[i];
    }
    cout<<endl;
    return;
}

void get_Arr(int arr[], int n){
    cout<<"Elements of the array : ";
    for(int i = 0; i<n; i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
    return;
}

int sumArr(int arr[],int n){
    int ans = 0;
    for(int i = 0; i<n; i++){
        ans += arr[i];
    }
    return ans;
}

int main() {

    int n;
    cout<<"Enter the size : ";
    cin>>n;

    int arr[n]; // Not a good practice

    Input(arr,n);
    get_Arr(arr,n);

    int sum = sumArr(arr,n);
    cout<<endl<<"Sum of the elments of the array : "<<sum<<endl;

    return 0;
}

8 ARRAY INTERACTION

#include <iostream>
#include <limits.h>
#include <vector>
using namespace std;

vector<int> array_Intersection(vector<int> &a, vector<int> &b){
    vector<int> ans;
    for(int i = 0; i<a.size(); i++){
        for(int j = 0; j<b.size(); j++){
            if(a[i] == b[j]){
                ans.push_back(a[i]);
                a[i] = INT_MAX;
                b[j] = INT_MIN;
            }
        }
    }
    return ans;
}
int main() {

    vector<int> a = {1,4,6,9,91};
    vector<int> b = {9,2,4,4,1};

    vector<int> ans = array_Intersection(a,b);

    cout<<"Intersection of both the arrays : ";
    for(int i = 0; i < ans.size(); i++){
        cout<<ans[i]<<" ";
    }

    return 0;
}

9 array interaction 02 

#include <iostream>
#include <limits.h>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> array_Intersection(vector<int> &a, vector<int> &b){
    // first sort both the arrays 
    sort(a.begin(),a.end());
    sort(b.begin(),b.end());

    vector<int> ans;

    int i = 0; // iterates over the first array
    int j = 0; // iterates over the second array
    while(i<a.size() && j<b.size()){
        if(a[i] == b[j]){
            ans.push_back(a[i]);
            i++;
            j++;
        }
        else if(a[i] < b[j]){
            i++;
        }
        else{
            j++;
        }
    }
    return ans;
}
int main() {

    vector<int> a = {1,4,6,9,91};
    vector<int> b = {9,2,4,4,1};

    vector<int> ans = array_Intersection(a,b);

    cout<<"Intersection of both the arrays : ";
    for(int i = 0; i < ans.size(); i++){
        cout<<ans[i]<<" ";
    }

    return 0;
}

10 find duplicate element in array

#include <iostream>
#include <limits.h>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> array_Intersection(vector<int> &a, vector<int> &b){
    // first sort both the arrays 
    sort(a.begin(),a.end());
    sort(b.begin(),b.end());

    vector<int> ans;

    int i = 0; // iterates over the first array
    int j = 0; // iterates over the second array
    while(i<a.size() && j<b.size()){
        if(a[i] == b[j]){
            ans.push_back(a[i]);
            i++;
            j++;
        }
        else if(a[i] < b[j]){
            i++;
        }
        else{
            j++;
        }
    }
    return ans;
}
int main() {

    vector<int> a = {1,4,6,9,91};
    vector<int> b = {9,2,4,4,1};

    vector<int> ans = array_Intersection(a,b);

    cout<<"Intersection of both the arrays : ";
    for(int i = 0; i < ans.size(); i++){
        cout<<ans[i]<<" ";
    }

    return 0;
}

11 ARRAY ELEMENTS SUM 

#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> pairSum(vector<int> &arr, int sum) {
    int n = arr.size();
    vector<vector<int>> ans;
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (arr[i] + arr[j] == sum) {
                vector<int> temp;
                temp.push_back(min(arr[i], arr[j]));
                temp.push_back(max(arr[i], arr[j]));
                ans.push_back(temp);
            }
        }
    } 
    sort(ans.begin(), ans.end());
    return ans;
}

int main() {
    vector<int> arr = {1, 2, 3, -3, -2, -1}; 
    int sum = 0;

    vector<vector<int>> ans = pairSum(arr, sum);

    for (int i = 0; i < ans.size(); i++) {
        for (int j = 0; j < ans[i].size(); j++) {
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }

    return 0;
}

12 IN ARRAY SWAP ALTERNATIVE ELEMENT

#include <iostream>
#include <vector>
using namespace std;

void print_arr(vector<int> &arr){
    int n = arr.size();
    for(int i = 0; i<n; i++){
        cout<<arr[i]<<" ";
    }
    cout<<endl;
    return;
}

void swap_alternate(vector<int> &arr){
    int n = arr.size();
    int i = 0;
    while(i+1 < n){
        swap(arr[i],arr[i+1]);
        i+=2;
    }
    return;
}

int main() {

    vector<int> arr = { 10, 11, 43, 91, 0, 2, 1};

    cout<<"Printing array before swaping alternate elements : ";
    print_arr(arr);

    swap_alternate(arr);

    cout<<endl<<"Printing array after swaping alternate elements : ";
    print_arr(arr);

    return 0;
}

12 IN ARRAY 3 ELEMENT SUM

#include <iostream>
#include <set>
#include <algorithm>
#include <vector>
using namespace std;

vector<vector<int>> tripletSum(vector<int> &arr, int sum){
    int n = arr.size();
    set<vector<int>> st;
    for(int i = 0; i<n; i++){
        for(int j = i + 1; j<n; j++){
            for(int k = j + 1; k<n; k++){
                if(arr[i] + arr[j] + arr[k] == sum){
                    vector<int> temp = {arr[i],arr[j],arr[k]};
                    sort(temp.begin(),temp.end());
                    st.insert(temp);
                }
            }
        }
    }
    vector<vector<int>> ans(st.begin(),st.end());
    return ans;
}

int main() {

    vector<int> arr = { 10, 5, 5, 5, 2};
    int sum = 12;

    vector<vector<int>> ans = tripletSum(arr,sum);
    for(int i = 0; i<ans.size(); i++){
        for(int j = 0; j < ans[i].size(); j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }

    return 0;
}

15 FIND UNIQUE ELEMENT IN ARRAY

#include <iostream>
#include <limits.h>
using namespace std;

void takeInput(int arr[],int n){
    cout<<"Enter the elements of the array : "<<endl;
    for(int i = 0; i<n; i++){
        cout<<"arr["<<i<<"] : ";
        cin>>arr[i];
    }
    cout<<endl;
}

void printArr(int arr[],int n){
    cout<<"Elements of the array : ";
    for(int i = 0; i<n; i++){
        cout<<arr[i]<<"  ";
    }
    cout<<endl;
    return;
}

int findUnique(int arr[],int n){
    for(int i = 0; i<n; i++){
        bool isUnique = true;
        for(int j = 0; j<n; j++){
            if(arr[i] == arr[j] && i!=j ){
                isUnique = false;
                break;
            } 
        }
        if(isUnique) return arr[i];
    }
    return -1;
}

int main() {

    int arr[5] = {1,2,2,3,1};

    printArr(arr,5);

    int res = findUnique(arr,5);
    cout<<"Unique Element in the array is "<<res<<endl;

    return 0;
}
